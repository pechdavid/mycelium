apply plugin: 'base'
apply plugin: 'scala'
apply plugin: 'application'

defaultTasks 'assemble'

sourceCompatibility = org.gradle.api.JavaVersion.toVersion("1.7")
targetCompatibility = org.gradle.api.JavaVersion.toVersion("1.7")

allprojects {
	group = 'cz.pechdavid.mycelium'
	sourceCompatibility = JavaVersion.VERSION_1_7
	version = '0.0.1'

	ext.plainVersion = version
	ext.artifactId = projectDir.name
	ext.groupId = group

	repositories {
		mavenCentral()
		maven {
			url "http://repo.scalanlp.org/repo"
		}
		maven {
			url "http://repo.typesafe.com/typesafe/releases/"
		}
		maven {
			url "http://repository-pechdavid.forge.cloudbees.com/snapshot/"
		}
	}
}

tasks.withType(ScalaCompile) {
	scalaCompileOptions.additionalParameters = ['-target:jvm-1.6']
}

mainClassName = "cz.pechdavid.mycelium"

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'project-report'

configurations {
	all*.exclude group: "commons-logging", module: "commons-logging"
	all*.exclude group: "commons-logging", module: "commons-logging-api"
	all*.exclude group: "org.apache.commons", module: "com.springsource.org.apache.commons.logging"
	all*.exclude group: "org.slf4j", module: "slf4j-simple"
	[compileJava, compileTestJava]*.options*.encoding = 'utf-8'
}

dependencies {
	compile "org.slf4j:slf4j-api:1.7.2"
	compile "org.slf4j:jcl-over-slf4j:1.7.2"

	compile "com.github.cessationoftime:akka-amqp_2.10:2.2-SNAPSHOT"
	compile "net.liftweb:lift-json_2.10:2.5-M4"

	compile 'junit:junit:4.11'
	compile "org.scalatest:scalatest_2.10.0:2.0.M5"
	runtime "ch.qos.logback:logback-classic:1.0.9"

	compile "com.typesafe.akka:akka-actor_2.10:2.1.0"
	compile "com.typesafe.akka:akka-slf4j_2.10:2.1.0"
	testCompile "com.typesafe.akka:akka-testkit_2.10:2.1.0"

	testCompile "junit:junit:4.11"
	
	// Libraries needed to run the scala tools
	scalaTools 'org.scala-lang:scala-compiler:2.10.0'
	scalaTools 'org.scala-lang:scala-library:2.10.0'

	// Libraries needed for scala api
	compile 'org.scala-lang:scala-library:2.10.0'
}

apply plugin: 'idea'
apply plugin: 'eclipse'

task wrapper(type: Wrapper) {
		gradleVersion = '1.4'
}

task testScala(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest',
        classname: 'org.scalatest.tools.ScalaTestAntTask',
        classpath: sourceSets.test.runtimeClasspath.asPath
    )
    ant.scalatest(runpath: sourceSets.test.output.classesDir,
        haltonfailure: 'false',
				maxmemory: '1024M',
				parallel: '1',
				numthreads: '1',
        fork: 'true')
}

test {
	dependsOn 'testScala'
	jvmArgs '-Xmx1024m', '-Xms256m', '-XX:MaxPermSize=1024m'
	testReport = false
	ignoreFailures = true
}


idea {
	module {
		downloadJavadoc = false
		outputDir = "$rootProject.projectDir/intellij/out" as File
		testOutputDir = "$rootProject.projectDir/intellij/testOut" as File
	}

	project {
		jdkName = '1.7'
		languageLevel = '1.7'

		ipr {
			withXml {
				def xmlRoot = it.asNode()

				def properties = xmlRoot.component.find { it.@name == 'Encoding' }
				properties.@useUTFGuessing = 'true'
				properties.@native2AsciiForPropertiesFiles = 'true'

				def vcsMappings = xmlRoot.component.find { it.@name == 'VcsDirectoryMappings' }
				vcsMappings.mapping.@vcs = 'Git'
				vcsMappings.mapping.@directory = '$PROJECT_DIR$/'
			}
		}
	}

	workspace {
		iws {
			withXml { provider ->
				def component = provider.node.component.find { it.@name == 'RunManager' }
				
				component.configuration.find { it.@type == "JUnit" }.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = 'file://$PROJECT_DIR$/'

				def launcherEl = component.configuration.find { it.@name == "Launcher" }

				if (launcherEl == null) {
					def launcherConfiguration = new NodeBuilder().configuration(default: false, name: "Launcher", type: "Application", factoryName: "Application") {
						option(name:"MAIN_CLASS_NAME", value:"cz.pechdavid.mycelium.Launcher")
						option(name:"VM_PARAMETERS", value:"-XX:MaxPermSize=256m -Xmx512m")
						option(name:"PROGRAM_PARAMETERS", value:"--config application.conf")
						option(name:"WORKING_DIRECTORY", value:'file://$PROJECT_DIR$/')
						module(name:"cz.pechdavid.mycelium")
					}
					component.append(launcherConfiguration)
				}
			}
		}
	}
}
